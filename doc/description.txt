Here I provide a description of the (Byte_Blitz_SFML) game engine:

It is SFML version of the Byte_Blitz game engine.

This game engine is made of several modules that interact with each other to run the game.
Main advantage of this approach is that each individual module can be upgraded without
affecting others.

[In this game engine, each folder holds a module so from now on I will use the word “folder”
instead of “module”]

Before, talking about folders in details I want to mention that entry point of the game engine
is “game.h” header file in BBS folder; I include all the game engine header files except the
asset (not all game needs all assets) and utility (used by other game engine modules, and rarely
by a agme) in it, so, to create a game with this game engine you need to include only this header
file and other asset and utility header files into the source code as needed.

Now I describe each folder:

================================================
Core part of the game engine written in pure c++
================================================

game_loop:

It holds game_loop.h header file that provides the basic game loop, which is the heart of this
game engine. game_loop.h contains a class that has the game loop defined in it. The game loop
can be started by calling a member function. This class have several virtual functions to create,
update, render the game which are called by the game loop to run the game. The game loop runs at
a certain fps, which can be changed using a method in the class. The source code of the game is
supposed to inherit this class and override the virtual methods like update(), render(), clear()
etc to create the game.

button:

It holds a header file that defines classes to make general purpose buttons and menu with these
buttons.

state_machine:

It holds a header file that describes several general purpose classes to implement an object oriented
statemachine in a game.

utility:

It contains several general purpose header files which are used by all other folders in this game engine.

entity_component_system:

It's a fast and efficient way to handle large no. of entities to the game. With this system, it's very
easy to add update and remove similar entities like (particles, bullets) to the game.

!!!! we need a 2nd ecs with simpler entity addition and deletion system, probably store the available
entity indices in a stack or queue, the entities won't be as well packed as they are now, so speed will
be slightly less, but it will be easy to operate (add or remove entities), good when we don't need
extremely large amount of entities.

timer:

It contains timer.h header file, which defines several asynchronous timer classes, useful for running
a function at specific intervals, tweening values over a range of time, asynchronously using multithreading.

===============
SFML extentions
===============

SFML_components:

Each header files in this folder, defines a new SFML feature, like Rounded Rectangle Shape, SFML text
centering etc. These features are made with SFML and std C++, to expand capabilities of SFML. They are
not dependent on any parts of this game engine or any other library, they are completely stand-alone.

=================
System components
=================

system:

This is the only module of this game engine that can have platform dependent codes,

Main purpose of this module is to provide means to access and manipulate the game
window, take inputs and do other platform dependent tasks like storing save files
into appdata folder etc.

It currently provides,

bb::WINDOW object, to access and manipulate the game window.

bb::INPUT object, to easily accept keyboard and mouse inputs while the game window
is focused.

A few fucntions to store and retrieve game data from windows "appdata/local" folder.

==========
The assets
==========

asset:

Every good game engine comes with some predefined assets, BBS is no different.

asset folder contains such predefined assets, created using other modules of BBS,
that can be directly used in your games.

These assets include,

Particle System effects, like firecracker, rocket exhaust, created with the entity_component_system.

Scrolling Background.

Effects like fade in-out, banner, created using the asynchronous timers.

Buttons that displays a string only, and a function to create menu with such buttons.

etc.

These assets are considered addons, not parts of the game engine, so we don't add them
to game.h, instead user has to add the required asset header files to the game source
code manually.